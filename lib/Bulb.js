// Generated by CoffeeScript 2.2.2
(function() {
  var Accessory, Bulb;

  Accessory = require('./Accessory');

  Bulb = (function() {
    var colours;

    class Bulb extends Accessory {
      // Add the 'property' definition here as we can't inherit from it
      static property(name, accessors) {
        return Object.defineProperty(this.prototype, name, accessors);
      }

      constructor(device) {
        var light;
        super(device);
        light = device.lightList[0];
        this.brightness = light.dimmer;
        this.isOn = light.onOff;
        this.transition = light.transitionTime;
        this.switchable = light.isSwitchable;
        this.dimmable = light.isDimmable;
        this.spectrum = light.spectrum;
        this.temperature = light.colorTemperature;
        this.hexcolour = light.color;
        if (light.hue != null) {
          this.hue = light.hue;
        }
        if (light.saturation != null) {
          this.saturation = light.saturation;
        }
      }

      async operate(obj) {
        var tradfri;
        tradfri = this.device.client;
        return (await tradfri.operateLight(this.device, obj));
      }

      switch(onOff) {
        return this.operate({
          onOff: onOff
        }).then((ok) => {
          this.ison = onOff;
          return ok;
        });
      }

      setBrighness(level) {
        return this.operate({
          dimmer: level
        }).then((ok) => {
          this.brightness = level;
          return ok;
        });
      }

      setColour(colour) {
        var temp;
        switch (this.spectrum) {
          case 'white': // cold/warm bulbs
            switch (colour) {
              case 'white':
                temp = 1;
                break;
              case 'warm':
              case 'warm white':
                temp = 62;
                break;
              case 'glow':
              case 'warm glow':
                temp = 97;
                break;
              default:
                temp = parseInt(colour);
                if (!((0 <= temp && temp <= 100))) { // 0 to 100 inclusive
                  throw new Error(`Unknown colour of ${colour}`);
                }
            }
            return this.operate({
              colorTemperature: temp
            }).then((ok) => {
              this.temperature = temp;
              return ok;
            });
          case 'rgb':
            throw new Error('Not written yet');
          case 'none': // do nothing
            break;
          default:
            throw new Error(`Unknown bulb spectrum: ${this.spectrum}`);
        }
      }

      setColor(colour) {
        return this.setColour(colour);
      }

    };

    colours = {
      white: 'f5faf6',
      warm: 'f1e0b5',
      glow: 'efd275'
    };

    Bulb.property("colour", {
      get: function() {
        switch (this.spectrum) {
          case 'white':
            switch (parseInt(this.temperature)) {
              case 1:
                return 'white';
              case 62:
                return 'warm';
              case 97:
                return 'glow';
              default:
                return this.temperature;
            }
            break;
          default:
            return this.hexcolour;
        }
      }
    });

    Bulb.property('color', {
      get: function() {
        return this.colour;
      }
    });

    return Bulb;

  }).call(this);

  module.exports = Bulb;

}).call(this);
