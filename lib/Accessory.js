// Generated by CoffeeScript 2.2.2
(function() {
  var Accessory, Bulb, EventEmitter, Remote, Sensor, Types,
    indexOf = [].indexOf,
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events');

  Types = require('node-tradfri-client').AccessoryTypes;

  Accessory = (function() {
    class Accessory extends EventEmitter {
      // Bulb, Remote, Sensor etc. should not be constructed externally
      // but should be created here
      static update(device) {
        var dev, item, type;
        type = Types[device.type];
        switch (type) {
          case 'lightbulb':
            item = new Bulb(device);
            break;
          case 'remote':
            item = new Remote(device);
            break;
          case 'motionSensor':
            item = new Sensor(device);
            break;
          default:
            throw new Error(`Unknown type: ${device.type}`);
        }
        if (Accessory.devices.has(item.id)) {
          dev = this.devices.get(item.id);
          dev.change(item);
          this.device = device;
          return dev;
        } else {
          Accessory.devices.set(item.id, item);
          return item;
        }
      }

      static delete(device) {
        var deleted;
        deleted = Accessory.devices.get(device.instanceId);
        if (deleted != null) {
          Accessory.devices.delete(device.instanceId);
          return deleted.delete();
        }
      }

      static get(name) {
        var item, ref, results, vals;
        vals = Accessory.devices.values();
        if (Array.isArray(name)) {
          results = [];
          for (item of vals) {
            if (ref = item.name, indexOf.call(name, ref) >= 0) {
              results.push(item);
            }
          }
          return results;
        } else {
          for (item of vals) {
            if (item.name === name) {
              return item;
            }
          }
        }
      }

      static byID(id) {
        return Accessory.devices.get(id);
      }

      static close() {
        return this.devices.clear();
      }

      // This is the inherited constructor
      constructor(device) {
        super();
        this.deleted = false;
        this.id = device.instanceId;
        //@type = Types[device.type]
        this.name = device.name;
        this.alive = device.alive;
        Object.defineProperty(this, 'device', { // non-enumerable property
          writable: true,
          value: device
        });
        Object.defineProperty(this, 'type', {
          enumerable: true,
          value: this.constructor.name
        });
      }

      change(newer) {
        var changed, k, result, v;
        result = {
          name: this.name
        };
        changed = {};
        for (k in newer) {
          if (!hasProp.call(newer, k)) continue;
          v = newer[k];
          if (!(v !== this[k] && k[0] !== '_')) {
            continue;
          }
          changed[k] = {
            old: this[k],
            new: newer[k]
          };
          this[k] = newer[k];
        }
        result.changed = changed;
        if (Object.keys(changed).length !== 0) {
          // don't emit a change unless something's actually changed
          return this.emit('changed', result);
        }
      }

      delete() {
        this.deleted = true;
        return this.emit('deleted', this.name);
      }

    };

    Accessory.devices = new Map;

    return Accessory;

  }).call(this);

  module.exports = Accessory;

  Bulb = require('./Bulb');

  Remote = require('./Remote');

  Sensor = require('./Sensor');

}).call(this);
