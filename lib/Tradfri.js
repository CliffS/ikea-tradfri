// Generated by CoffeeScript 2.2.2
(function() {
  var Accessory, Client, DEBUG, Group, NodeTradfri, Property, Tradfri, Types, sleep;

  NodeTradfri = require('node-tradfri-client');

  Client = NodeTradfri.TradfriClient;

  Types = NodeTradfri.AccessoryTypes;

  Accessory = require('./Accessory');

  Group = require('./Group');

  Property = require('./Property');

  DEBUG = false;

  sleep = function(time = 1) {
    return new Promise(function(resolve, reject) {
      return setTimeout(function() {
        return resolve();
      }, time * 1000);
    });
  };

  Tradfri = class Tradfri extends Property {
    // This should be called with either a securityId string
    // or an object containing the keys: identity & psk
    constructor(hub, securityId) {
      super();
      this.hub = hub;
      this.securityId = securityId;
      this.client = new Client(this.hub);
    }

    connect() {
      var credentials;
      credentials = void 0;
      return (typeof this.securityId === 'string' ? this.client.authenticate(this.securityId) : Promise.resolve({
        identity: this.securityId.identity,
        psk: this.securityId.psk
      })).then((result) => {
        credentials = result;
        return this.client.connect(result.identity, result.psk);
      }).then((ans) => {
        if (!ans) {
          throw new Error("Failed to connect");
        }
        this.client.on('error', (err) => {
          return console.error(err); // Just log it to STDERR and carry on
        }).on("device updated", (device) => {
          var newdev;
          newdev = Accessory.update(device);
          if (DEBUG) {
            return console.log(`device updated: ${device.name}`);
          }
        }).on("device removed", (device) => {
          return Accessory.delete(device);
        }).on("group updated", (group) => {
          Group.update(group);
          if (DEBUG) {
            return console.log(`group updated: ${group.name}`);
          }
        }).on("group removed", (group) => {
          return Group.delete(group);
        }).on("scene updated", (groupID, scene) => {
          var group;
          group = Group.byID(groupID);
          if (DEBUG) {
            console.log(`scene updated: ${group.name}: ${scene.name}`);
          }
          if (!group) {
            throw new Error(`Missing group ${groupID}`);
          }
          return group.addScene(scene);
        }).on("scene removed", (groupID, scene) => {
          var group;
          group = Group.byID(groupID);
          if (!group) {
            throw new Error(`Missing group ${groupID}`);
          }
          return group.delScene(scene.instanceId);
        });
        return this.client.observeDevices();
      }).then(() => { // Need the devices in place so not Promise.all()
        if (DEBUG) {
          console.log("observeDevices resolved");
        }
        return this.client.observeGroupsAndScenes();
      }).then(() => {
        if (DEBUG) {
          console.log("observeGroupsAndScenes resolved");
        }
        return credentials;
      });
    }

    reset() {
      return this.client.reset();
    }

    close() {
      this.client.destroy();
      Group.close();
      Accessory.close();
      return delete this.client;
    }

    device(name) {
      return Accessory.get(name);
    }

    group(name) {
      return Group.get(name);
    }

  };

  module.exports = Tradfri;

}).call(this);
