// Generated by CoffeeScript 2.2.2
(function() {
  var Group, Property, Scene,
    hasProp = {}.hasOwnProperty;

  Property = require('./Property');

  Scene = require('./Scene');

  Group = (function() {
    class Group extends Property {
      static update(group) {
        var grp, newgroup;
        newgroup = new Group(group);
        if (Group.groups.has(newgroup.id)) {
          grp = Group.groups.get(newgroup.id);
          grp.change(newgroup); // , group
          return grp;
        } else {
          Group.groups.set(newgroup.id, newgroup);
          return newgroup;
        }
      }

      static delete(group) {
        var deleted;
        deleted = Group.groups.get(group.instanceId);
        if (deleted != null) {
          Group.groups.delete(group.instanceId);
          return deleted.delete();
        }
      }

      static get(name) {
        var group, ref;
        ref = Group.groups.values();
        for (group of ref) {
          if (group.name === name) {
            return group;
          }
        }
      }

      static byID(id) {
        return Group.groups.get(id);
      }

      static close() {
        return this.groups.clear();
      }

      constructor(group) {
        super();
        this.deleted = false;
        this.id = group.instanceId;
        this.name = group.name;
        this.isOn = group.onOff;
        this.dimmer = group.dimmer;
        this.sceneId = group.sceneId;
        Object.defineProperty(this, 'rawGroup', {
          value: group
        });
        Object.defineProperty(this, 'groupScenes', {
          value: new Map
        });
      }

      change(newgroup) {
        var k, results, v;
        results = [];
        for (k in newgroup) {
          if (!hasProp.call(newgroup, k)) continue;
          v = newgroup[k];
          if (v != null) {
            results.push(this[k] = v);
          }
        }
        return results;
      }

      addScene(scene) {
        if (!(scene instanceof Scene)) {
          scene = new Scene(scene);
        }
        return this.groupScenes.set(scene.id, scene);
      }

      getScene(name) {
        var ref, scene;
        ref = this.groupScenes.values();
        for (scene of ref) {
          if (scene.name === name) {
            return scene;
          }
        }
      }

      delScene(sceneID) {
        return this.groupScenes.delete(sceneID);
      }

      operate(operation) {
        return this.rawGroup.client.operateGroup(this.rawGroup, operation);
      }

      switch(onOff) {
        console.log(`toggle ${onOff}`);
        return this.rawGroup.toggle(onOff).then((ok) => {
          return this.isOn = onOff;
        });
      }

      setScene(name) {
        var id, ref;
        id = (ref = this.getScene(name)) != null ? ref.id : void 0;
        if (id) {
          return this.rawGroup.activateScene(id).then((ok) => {
            return this.sceneId = id;
          });
        } else {
          return Promise.reject(new Error(`Can't find scene ${name} in ${this.name}`));
        }
      }

      setLevel(level) {
        return this.rawGroup.setBrightness(level).then((ok) => {
          return this.dimmer = level;
        });
      }

    };

    Group.groups = new Map;

    Group.property('scene', {
      get: function() {
        var ref;
        return (ref = this.groupScenes.get(this.sceneId)) != null ? ref.name : void 0;
      }
    });

    Group.property('scenes', {
      get: function() {
        return Array.from(this.groupScenes.values()).map((value) => {
          return value.name;
        });
      }
    });

    Group.property('level', {
      get: function() {
        return this.dimmer;
      }
    });

    return Group;

  }).call(this);

  module.exports = Group;

}).call(this);
